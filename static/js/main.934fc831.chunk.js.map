{"version":3,"sources":["components/movie_item.js","components/movie_list.js","components/searchbar.js","components/menubar.js","components/navbar.js","App.js","serviceWorker.js","index.js"],"names":["movieItem","_ref","movie","react_default","a","createElement","className","src","Poster","alt","Title","movieList","movies","map","key","imdbID","searchBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","searchChange","evt","setState","term","target","value","searchClicked","preventDefault","onSearchTerm","state","onChange","type","placeholder","aria-label","onClick","Component","menuBar","href","id","role","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","navBar","data-target","aria-controls","searchbar_searchBar","APIKEY","APIURL","App","searchMovies","arguments","length","undefined","search","fetch","then","res","json","fetchMovies","Search","totalCount","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.934fc831.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function movieItem({movie}) {\r\n    return (\r\n        <div className=\"card col-md-3\">\r\n            <img className=\"card-img-top\" src={movie.Poster} alt={movie.Title}/>\r\n            <div className=\"card-body\">\r\n                <h5 className=\"card-title\">{movie.Title}</h5>                \r\n                <button className=\"btn btn-primary\">View detail</button>\r\n            </div>\r\n        </div>\r\n        )\r\n}","import React from 'react';\r\nimport MovieItem from './movie_item';\r\n\r\nexport default function movieList({movies}) {\r\n    if(!movies) {\r\n        return null;\r\n    }\r\n    \r\n    return (    \r\n    <div className=\"row\">\r\n    {       \r\n        movies.map(movie => <MovieItem key={movie.imdbID} movie={movie}/>)\r\n    } \r\n    </div>)\r\n}","import React, {Component} from 'react';\r\n\r\nexport default class searchBar extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            term: ''\r\n        }\r\n    }\r\n\r\n    searchChange = (evt) => {\r\n        this.setState({term: evt.target.value})\r\n        //this.props.onSearchTerm(evt.target.value) \r\n    }\r\n\r\n    searchClicked = (evt) => {\r\n        evt.preventDefault(); \r\n        this.props.onSearchTerm(this.state.term);\r\n    } \r\n\r\n    render() {\r\n        return (\r\n            <form className=\"form-inline my-2 my-lg-0\">\r\n                    <input className=\"form-control mr-sm-2\" \r\n                        onChange={this.searchChange}\r\n                        type=\"search\" value={this.state.term} placeholder=\"Search\" aria-label=\"Search\"/>\r\n                    <button onClick={this.searchClicked} className=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button>\r\n            </form>\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default function menuBar() {\r\n    return (\r\n        <ul className=\"navbar-nav mr-auto\">\r\n            <li className=\"nav-item active\">\r\n                <a className=\"nav-link\" href=\"#\">Home <span className=\"sr-only\">(current)</span></a>\r\n            </li>\r\n           \r\n            <li className=\"nav-item dropdown\">\r\n                <a className=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                Dropdown\r\n                </a>\r\n                <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\r\n                <a className=\"dropdown-item\" href=\"/movies\">Movies</a>\r\n                <a className=\"dropdown-item\" href=\"/series\">Series</a>\r\n                \r\n                </div>\r\n            </li>\r\n        </ul>         \r\n        )\r\n}","import React from 'react'\r\nimport SearchBar from './searchbar'\r\nimport MenuBar from './menubar'\r\n\r\nexport default function navBar({onSearchTerm}) {\r\n    return (\r\n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark fixed-top\">\r\n        <a className=\"navbar-brand\" href=\"#\">Navbar</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <MenuBar/>\r\n            <SearchBar onSearchTerm = {onSearchTerm}/>\r\n        </div>\r\n    </nav>\r\n)}","import React, { Component } from 'react';\nimport './App.css';\nimport VideoList from './components/movie_list';\nimport NavBar from './components/navbar';\n\nconst APIKEY = '802ea4db'\nconst APIURL = 'http://www.omdbapi.com'\n\nfunction fetchMovies(search = '') {\n  return fetch(APIURL + '?apikey=' + APIKEY + '&s=' + search).then(res => res.json());\n}\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      movies: [],\n      totalCount: 0\n    }\n  }\n\n  searchMovies = (term = '') => {\n    if(term.length<3) {\n      return\n    }\n\n    fetchMovies(term).then(res => {\n      //console.log(res);\n      this.setState({\n        movies: res.Search,\n        totalCount: res.totalCount\n      })\n    });\n  }\n\n  componentDidMount() {\n    //this.searchMovies('back to the future')\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n      <NavBar onSearchTerm={this.searchMovies}/>\n      \n      <div className=\"container\">\n       <h1>My favorite movies</h1>\n        <VideoList movies={this.state.movies}/>\n      </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}